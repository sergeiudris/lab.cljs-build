p 9aea4d2 Initial commit
s e0982fb build
s 50f61ad build
s 1711212 build
s f121a4d build
s 4dd4843 build
# initial commit

p e8c0d92 design
s 97e7e1d design
# design goals

p 6ea7ad2 async
s cfaee90 mult.edn , protocols
s e9d8abc repl into vsocde works: can put vals on a channel, redefine fns called from proc
s e989f13 build
s f9600d3 build
s ce64d3a build
s d71a070 build
s 5a06c8f build
s 57c1e5c build
s 0ec2013 repl
# build, mult.edn, protocols
# - Dockerfile
# - shadow-cljs
# - repl into vsocde works: can put vals on a channel, redefine fns called from proc

r 0ce8a21 design: seemless switching, config driven

p c2bcb41 notes
s 729fe92 notes
s 98443f8 notes
s d1146bf notes
s d92ade1 notes
s b101cec notes
s 41d39fe notes
s bb2a982 notes
s d1e1b1c notes
s 65810a4 notes
s b7c6af3 notes
s 7078ade notes
s 99cb58a :build dock for mult
s eea80fc notes
s 5b97c66 ws
s ef94502 notes
s c2c7477 net.Socket
s d2824af notes
s d08f45b net
s fde9fdb notes
s e89464f notes
s ab6ff80 bencode
s 919f725 eval via nrepl
# net.Socket, bencode, eval via nrepl

r ffc5512 design
s 8eb732f typo
# design: pin connections, user has control

p a3110fc notes
s 94eca81 notes
s eca2d92 notes
s 3148381 notes
s 94408ae notes
s 8c93195 notes
s ce105d9 notes
s cfa947e org
s bb7c1de org
s 68383fa notes
s 9a7d2d1 build
s dd3718a build
s e138f75 org
s 2d1b897 build
s 852d5b9 package.json
s 89d45e7 system
s eb64f0b build
s 7c05cfa oeg
s d6a9e32 org
s 5d51290 cljs basics
s 8611cd5 tabs
s 4265f07 webview msg passing
# build: tabapp, extension, proc-main proc-ops, webview msg passing

p d7e3c0e protocols
s 43f1ead procs
s ecae515 procs
s 04857fc procs
s b47e45b procs
s 0cb66e8 proc
s 1cc6740 proc
s 920121a system
s f1e4c82 proc
s 3edb9d5 chans
s b9a62cf proc
s 0f82f24 proc
s 4e2b9b3 proc
s 5ef368f proc
s 7e7f165 procs
s 9466d59 proc
# introduce procs and proc abstraction

p 7ec1e97 proc and channel decoupled interfaces
s 1ddd5c7 protocols
s f3250d3 protocols
s c5d5c51 protocols
s c59f128 protocols
s 07d2f4f protocols
s d6ccbab procs
s 01437bf procs
s d6c0168 protocols
s cd44ce4 procs
s c853cdd org
s 002693e org
s 681301f protocols
s ca601e1 protocols
s 49b135f org
s 4c035e5 org
s fbdbd6d async/map
s a2478e9 start proc-logs after other channels
s 6059f3d org
s 4ed19b2 protocols
s 3f96a93 protocols
s 788f1e8 -op-started -op-stopped
s 342b15c async start stop of procs
s 30e782e ctx
s 6ded684 ctx
# proc and channel decoupled interfaces via protocols


p 892b2b5 readme
s 7940a55 decouple proc from procs
s ce8092a procs
s 2bc8d90 procs|m
# decouple proc from procs

p d452875 org
s 594fbec org
s aed4e46 org
s 72a1aea build
s a50c9a5 build
# introduce ns structure:  mult/impl/ mult/protocols/ main.cljs

p d9f2f53 protocols
s 5bf289e protocols
s ed29dd4 editor|
s 83e4855 protocols
s aa4a4fe protocols
s 0daaedc keep channels within procs, form callbacks to pass to external api
s 1f69d4c protocols
s cb67c69 proc-ops
s 1c6644c proc-editor
s 082ff63 namespaces
s cba7f12 build
s b8c1413 protocols
s 3702fcc notes
s e1e50dc notes
s d7294ca notes
s 3e36888 protocols
s 9d14142 naming
# protocols, procs, channels; keep channels within procs
# - decouple proc from procs
# - procs|m
# - editor| proc-editor
# - form callbacks to pass to external api

p 52058b8 ^:const
s 846b04f channels
s eeb15ea org
s e203340 org
s f8aab71 compiled
# first compilation: importing protocol namespaces

p 7ec76d0 protocols
s b974884 org
s e967a82 main
s 3b3bd1f procs
s 4788134 main
s 431c7ad build
s 3017dfe proc-log
s 976343f proc-main
s 2408170 proc-ops
s 5c20aad proc-main
s a4ff270 proc-main
s 54649f0 proc-ops
s 3511acb proc-editor
s 25c7da4 org
s 427d2a0 proc-main
s 618bc69 proc-main
s 2f2e9c3 tabapp
s f14d57e tab
s 701e62a channels
s 0d0462c channels
s a6c015a ops and editor channels
s c9b447a tabapp
s 4f9f7e1 compiled
s cf69a48 main
s 8065fb8 org
s ebc4312 procs
s 165c7f1 init
s 7f4bd1b logs
s 01d4119 logs
# simplify: replace procs abstraction with simple procs; compiled


r 29244eb assoc tab/id on intermediate passing from tabapp to ext

p f01115c mult.edn
s 3aca1e8 mult.edn
s edf920a org
s f9ee8b1 org
s f50f8ba conn
s 821067a mult.edn
s 45aff58 mult.edn
s 8bac365 tabpap
s dbab48d mult.edn
# mult.edn structure and loading

p f64c212 vscode
s 88d6d53 vscode
s 18dae8b notes
s 60da6bb node-nrepl-client
s 5a005e8 conns
s acc12dd nrepl
s 59b88f0 pad
# nrepl, node-nrepl-client

p 735f016 design
s 6a40df9 mult.edn
s 8cc339a lrepl
s e5dff24 no init-ns
# design:  mult.edn, logical repls
# - mult.edn structure, no init-ns

p f2c51f8 close! response channels
s e05be96 notes
# close! response channels

p 8008be1 mult.protocols.val
s a9343ba protocols
s 187ca6f protocols
#  mult.protocols.val: replace multiple nspaces with clearer Vals protocol 

p bd5e8e2 bash
s 4e04e52 netsocket
s 324cea0 conn
s 6195fae conns
s 736d4a7 conns
s 8771fd9 log
s 403fd61 design
s 42c5fb7 notes
s 6055e1b editor conn nrepl lrepl
s 7465709 conn
s 9041ff8 ops
s 7e065cb editor
s 876b098 async
s 0696099 nrepl
s a781d8d nrepl
s dead3e1 nrepl
s 9777b16 nrepl
s 9bab7af nrepl
s bf43d4a nrepl via async with pub partitioning
s 112f64f nrepl
s 1a874d8 protocols
s cbbfe77 nrepl
s ca646a5 async
s 8d931a6 conn
s f5a1705 conn
s fe062a7 conf
# implement decoupled netsocket and nrepl: eval returns a channel with combined response
# - custom core.async.pub to use topic partitioning, sub/ubsub to join nrepl operation responses
# - netsocket abstracted into a channel publication
# - netsocket lifecycle and events on a separate channel

p 66294b1 lrepl
s 1ee581c mult.edn
s 514c9d7 mult.edn use code as data
# mult.edn structure; :include as '(fn [] ...)

p f44cf23 protocols
s 52417cd protocols
s e465669 protocols
s c982ade protocols
s f0d01a5 protocols
s ee5fd56 protocols
s 74fc891 protocols
s fb16ee6 protocols
s 4ec8d7a ns
s fe1226e compiled
s 4d049d8 tabapp
s 4d0c266 protocols
# protocols: unify into single file; compiled


p 5fd6383 ns
s 30a7bd9 cljsjs
s 71af87b conf
s b62bcd7 protocols
s 52e3fc7 procotols
s 8b129a4 eidotr get-namesapce
s d71fa66 protocols
s 5e5f442 mult.edn
s f8e427b pad
s a100adf cljs.js eval works on node as well
s 40c3727 pad
s e23ff10 build
s 20da8f7 build
s 17dfdb1 eval with deafult cljs compilation works
s 1b6af03 notes on eval and shadow-cljs
s dfd16bf notes
s 86fffa9 bash
s 991aacb notes
s bdb0024 notes
s afccea0 tools
s 6df8ba1 notes
s a06dbcd notes
s 50169da cljs.js
s a7967ca bash
s bce82c3 build
s bc94000 mult.edn
s 78094dc build
s 5f307b3 notes
s eb8e23c build
s 956f56a notes
s 3f1229b notes
s 6406d9e notes
s b29bd0e shadow-cljs bootstrap and core.async not compatible
s f6b6db1 notes
s 607668f notes
s a9b8fc4 notes
s 9046e61 :checkpoint shadow-cljs self-hosting works on node via :bootstrap with andare aliasing core.async
s c84504d notes
s fad02df build remove project unrelated files
s df57e5f add README package.json
# cljs.js self-hosting: self-hosting works on node via :bootstrap with andare aliasing core.async

# Rebase df57e5f onto c84504d (274 commands)
#
# Commands:
# p, s <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
